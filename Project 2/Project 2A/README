NAME: FNU SHIVA SANDESH
EMAIL: sandesh.shiva362@gmail.com
ID : 111111111
Project 2A - Summer 2017 - CS 111 */
Project Files:
	lab2_add.c: Contains the implementation of the the add fucntion with various
		    combinations of the sync optins and timing every one of these
		    operations using system call and MONOTONIC settings.
	lab2_list.c: This file is the driver for the sorted list class whose header was 
		     provided to us. This was challenging as for the longest time I was 
		     doing it wrongly by not locking at the right places. I also made a	
		     mistake that I tried to lock individual element rather than whole
		     thread. This creatd a lot of segfaults a=but evetually I corrected it.
	lab2_add.csv: Contains the results after execting the csv_generate.sh script for the 
		      first pat of the lab. This file contains all the data required to generate
		      the graphs, for which we have been provided the script. 
	lab2_list.csv : Contains the results after execting the csv_generate.sh script for the
                      2nd pat of the lab. This file contains all the data required to generate
                      the graphs, for which we have been provided the script.
	Grpahs: 9 Graphs that have been generated using the scrip provided to us.
	Makefile: Used to build the executables, run script to get data for the graphs,
		  build the tar ball and build the executable.
	csv_generate.sh: Separate script that I wrote to create data for graphs. 

QUESTION 2.1.1 - causing conflicts:
	 Why does it take many iterations before errors are seen?

	 Answer: The errors are casued primarily due to errors in the sychronization.
	 The error is visible by increasing the number of threads and iterations
	 at the same time. Single threads never fails to produce the correct 
	 result. Now these errors show by prgressively increasing the number of 
	 threads because with increased number of the threads the chaces of occurence
	 of reace conditions are increased due due larger number of threads trying to 
	 execute the critical sections. Thus result in the error as visible by the
	 counter being not equalt to zero.

	 Why does a significantly smaller number of iterations so seldom fail?

	 Answer: With decreasaed numeber of iterations the chances of occurence of race
	 conditions are minimized, howerver they are not zero. This leads to an 
	 reduced error cases since the number of iterations means less number of 
	 times exctuion of the critcal section of the code. 

QUESTION 2.1.2 - cost of yielding:
	 Why are the --yield runs so much slower?  Where is the additional time going?

	 Answer: The calling thread yields, offering the implementation the opportunity to 
	 reschedule. This function shall be called when a thread waits for other threads to 
	 advance without blocking. So as the thread is waiting to reschedule it takes longer 
	 to execute all the threads. This results in an increased amount of time and making the
	 process run much slower. This is where the additional time overhead comes from, more
	 appropriately from context switching. 	 
	 
	 Is it possible to get valid per-operation timings if we are using the --yield option?
	 If so, explain how. If not, explain why not.

	 Answer: Theoretically one can recod the time taken for yield by timing the yield section
	 of the code. However, the system call used to do so would also have an additional overhead
	 thus, one might get an estimate however, such an estimate would be high. The true 
	 per-operation cost might be smaller than one received by dividing the total time
	 minus the overhead for yield with the total number of operations.

QUESTION 2.1.3 - measurement errors:
	 Why does the average cost per operation drop with increasing iterations?
	 If the cost per iteration is a function of the number of iterations, how do we know 
	 how many iterations to run (or what the "correct" cost is)?

	 Answer: The time calcualtions we are recording not includes the time for performing
	 all the operations but also the time overhead to create threads and additional cost
	 of wating for join(). Now the time overhead for creating the thread is cocnsistent 
	 thus by increasing the number of iterations the time of the creation of the threads
	 miniaturized. Thus the calculation time will dominate the time by increasing the 
	 iterations. Now to answer the second part, one has to understand that there is a
	 physical limitations for calculating the 100 % accurate time for the per-operation.
	 However, increasing the number of iterations to very large number and perfroming 
	 the test over and over again, one will get a very good estimate. 

QUESTION 2.1.4 - costs of serialization:
	 Why do all of the options perform similarly for low numbers of threads?
	 Why do the three protected operations slow down as the number of threads rises?

	 Answer: For lower number of threads the chances of occurence of the race conditions 
	 are minimized. However, in this case as we are doing the things in the serial fashion
	 the time overhead for operaiotn of --sync and pthread_mutex are similar only for the
	 lower number of thread. With increase in the number of threads the overhead timing 
	 becoms a major issue. Especially for the spin lock the overhead and time wasted for 
	 polling if the lock has beeen released by the other thread account for the major
	 delay in operations.
++++++++++++++++++++++++++++++ Questions Part II ++++++++++++++++++++++++++++++++++++++++++

QUESTION 2.2.1 - scalability of Mutex
	 Compare the variation in time per mutex-protected operation vs the number of threads 
	 in Part-1 (adds) and Part-2 (sorted lists).
	 Comment on the general shapes of the curves, and explain why they have this shape.
	 Comment on the relative rates of increase and differences in the shapes of the curves,
	 and offer an explanation for these differences.

	 Answer:  The time in the second case is higher than the time in the forst case. This
	 is expected becuase of two reasons the forst reason is that in the second case the 
	 part of the being locked performs a non-trivial operation of either insertion or removal
	 of an iteam from a doubly linked list. Now in first the operation was trivial of addition.
	 The second reason that arises from the first is that since the lis performs non-trivial 
	 operations thus, the critical section in the second cases have higer number of instruction
	 count which will take more CPU time for execution. There is a small similarity in the 
	 shape of the curves in both the cases however there are subtle differences too. For both
	 the cases the time taken increases with the increase in the number of threads. There is 
	 an upward trend for the same. However, ocassionally during several runs the graphs in few
	 instances also looked zig-zag. In the second case the number of threads being used in some 
	 cases are higher than the first case however generally they have abn upward trend too.
	 The difference is the reason behind these upward thrends is bit different. In forst case
	 the trends arises due to the increased threads and thus threads dominante the timing.
	 IN second case the instructions performed by each thread dominate the timimg along
	 with time spent for polling in threads have been released or not. 
 
QUESTION 2.2.2 - scalability of spin locks

	 Compare the variation in time per protected operation vs the number of threads for list
	 operations protected by Mutex vs Spin locks. Comment on the general shapes of the curves,
	 and explain why they have this shape.
	 Comment on the relative rates of increase and differences in the shapes of the curves,
	 and offer an explanation for these differences.
	 Answer: Mutex protected locks had a timing line which was downward slopping. The 
	 program was running much faster in general. Howerver, both observed better performance.
	 In case of the spin lock there is a considerabel overhead arising due to the polling
	 of the threads waiting for there turn to run. This adds to the overall time with the
	 spin locks. 

Citations 
	1. https://computing.llnl.gov/tutorials/pthreads/
	2. https://codereview.stackexchange.com/questions/29198/random-string-generator-in-c
	3. http://www.cplusplus.com/forum/windows/88843/

NAME: FNU SHIVA SANDESH
EMAIL: sandesh.shiva362@gmail.com
ID: 404772648